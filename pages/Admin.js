import React, { useState} from 'react';
import { useRouter } from 'next/router';
import Head from 'next/head';
import getConfig from 'next/config';
// Components
import Navigation from '../components/Navigation/Navigation';
import Sidebar from '../components/Sidebar/Sidebar';
import OverviewTable from '../components/OverviewTable/OverviewTable';
// API
import { apiURL } from '../lib/apiURL';
// Nookies
import nookies from 'nookies';
// Material UI Tabs
import { styled } from '@mui/system';
import TabsUnstyled from '@mui/base/TabsUnstyled';
import TabsListUnstyled from '@mui/base/TabsListUnstyled';
import TabPanelUnstyled from '@mui/base/TabPanelUnstyled';
import { buttonUnstyledClasses } from '@mui/base/ButtonUnstyled';
import TabUnstyled, { tabUnstyledClasses } from '@mui/base/TabUnstyled'
// Material UI Icons
import AddIcon from '@mui/icons-material/Add';
// Axios
const axios = require('axios').default;

// Logout
const Admin = (props) => {
  const {places: {
    id, 
    Name, 
    Price, 
    About, 
    Location, 
    ImgArray,
    Ratings,
    Size, 
    Amenities
  }} = props;

  const newPlaces = props.places;
  console.log(newPlaces);

  // Log Out
  const router = useRouter();
  const { user: { email, username } } = props;

  const logout = async () => {
    try {
      await axios.get('/api/logout');
      router.push('/');
    } catch (e) {
      console.log(e);
    }
  }
  
  // Tabs
  const Tab = styled(TabUnstyled)`
  width: 100%;
  font-family: $primary-font;
  cursor: pointer;
  font-size: 22px;
  background-color: transparent;
  padding: 0 3px;
  margin: 0 2px;
  border: none;
  display: flex;
  justify-content: center;
  border-radius: 0;
  border-bottom: 2px solid transparent;
  box-shadow: none;

    &:hover {
      border-bottom: 3px solid #547E77;
    }

    &:focus {
      border-bottom: 3px solid #547E77;
    }

    &.${tabUnstyledClasses.selected} {
      background-color: transparent !important;
      border-bottom: 3px solid #547E77;
    }

    &.${buttonUnstyledClasses.disabled} {
      opacity: 0.5;
      cursor: not-allowed;
    }
  `;

  // Tab Panel
  const TabPanel = styled(TabPanelUnstyled)`
    width: 100%;
    font-family: $secondary-font;
  `;

  // Tab List
  const TabsList = styled(TabsListUnstyled)`
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    align-content: space-between;
  `;

  // Add 

  return (
    <>
     <Head>
        <title>Holidaze</title>
        NEEDED
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <Navigation/>
        <Sidebar/>
      </header>
      <main>
        <h1>Login</h1>
        <div>
          <div>Username: {username}</div>
          <div>Email: {email}</div>
          <button onClick={logout}>Logout</button>
        </div>
        <div className="adminTabs">
          <TabsUnstyled defaultValue={0}>
            <TabsList>
              <Tab className="tabTitle">Stays Overview</Tab>
              <Tab className="tabTitle">Enquries</Tab>
              <Tab className="tabTitle">Messages</Tab>
            </TabsList>
            <TabPanel value={0} className="tabContent-1">
            <div className="tabContent-1-heading">
                <h3>See, edit, add or delete places to stay</h3>
                <div className="tabContent-1-heading-button">
                  <a href={`/Add`} className="button"><AddIcon/> Add a new place</a>
                </div>
              </div>
            <div className="overviewTable">
                <table className="overviewTable-table">
                  <thead>
                      <tr>
                        <th><p className="flexCardtitle">ID</p></th>
                        <th><p className="flexCardtitle">Name</p></th>
                        <th><p className="flexCardtitle">Image</p></th>
                        <th><p className="flexCardtitle">Price</p></th>
                        <th><p className="flexCardtitle">Location</p></th>
                        <th><p className="flexCardtitle">Amenities</p></th>
                        <th><p className="flexCardtitle">Edit</p></th>
                        <th className="flexCardtitle noRightBorder"><p>Delete</p></th>
                      </tr>
                  </thead>
                    {newPlaces.map((
                    {
                      id, 
                      Name, 
                      Price, 
                      About, 
                      Location, 
                      Ratings,
                      ImgArray,
                      Size,
                      Amenities,
                    }
                  ) =>  {
                    return (
                    <OverviewTable 
                      id={id}
                      key={id}
                      Name={Name}
                      About={About}
                      Price={Price}
                      Location={Location}
                      Ratings={Ratings}
                      ImgArray={ImgArray}
                      Size={Size}
                      Amenities={Amenities}
                    />
                    );
                    }
                  )}
                </table>
              </div>
            </TabPanel>
            <TabPanel value={1}>
              <div className="tabpanel"></div>
            </TabPanel>
            <TabPanel value={2}>
              <div className="tabpanel"></div>
            </TabPanel>
          </TabsUnstyled>
        </div>
      </main>
      <footer>
      </footer>
  </>
  )
}

export const getServerSideProps = async (ctx) => {
  const cookies = nookies.get(ctx)
  let user = null;

  if (cookies?.jwt) {
    try {
      const { data } = await axios.get('http://localhost:1337/users/me', {
        headers: {
          Authorization:
            `Bearer ${cookies.jwt}`,
          },
      });
      user = data;
    } catch (e) {
      console.log(e);
    }
  }

  if (!user) {
    return {
      redirect: {
        permanent: false,
        destination: '/'
      }
    }
  }
   
  const res = await fetch(apiURL);
  const data2 = await res.json();

  return {
    props: {
      user,
      places : data2,
    }
  }
}

export default Admin;